// SQL Server (Azure SQL)
datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("USER") @db.VarChar(16)

  accounts Account[]
  sessions Session[]
  team     Team?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RLTeam {
  id      String     @id @default(cuid())
  name    String     @db.VarChar(120)
  short   String?    @db.VarChar(12)
  players Player[]
  weeks   TeamWeek[]
}

model Player {
  id       String  @id @default(cuid())
  name     String  @db.VarChar(120)
  rlTeamId String?
  rlTeam   RLTeam? @relation(fields: [rlTeamId], references: [id])
  price    Int     @default(10)

  stats           PlayerGameStat[]
  teamMemberships TeamPlayer[]

  aliases PlayerAlias[]
}

model Week {
  id               String   @id @default(cuid())
  number           Int      @unique
  startDate        DateTime
  firstBroadcastAt DateTime // lock = firstBroadcastAt - 1h
  unlockedAt       DateTime // usually day after firstBroadcastAt
  isLocked         Boolean  @default(false) // redundancy for convenience

  teamWeeks   TeamWeek[]
  games       Game[]
  playerStats PlayerGameStat[]
  teamScores  TeamWeekScore[]

  transferLogs TransferLog[]
}

model TeamWeek {
  id       String @id @default(cuid())
  rlTeamId String
  weekId   String
  games    Int

  rlTeam RLTeam @relation(fields: [rlTeamId], references: [id])
  week   Week   @relation(fields: [weekId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([rlTeamId, weekId])
}

model Game {
  id     String   @id @default(cuid())
  weekId String
  date   DateTime

  week Week @relation(fields: [weekId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  stats PlayerGameStat[]
}

model PlayerGameStat {
  id       String  @id @default(cuid())
  playerId String
  weekId   String
  gameId   String?

  // ðŸ‘‡ Per-series AVERAGES (float) instead of totals
  goals   Float @default(0)
  assists Float @default(0)
  saves   Float @default(0)
  shots   Float @default(0)
  demos   Float @default(0)
  score   Float @default(0)

  // Number of games played in the series (Bo5 â†’ 3..5)
  games Int @default(1)

  player Player @relation(fields: [playerId], references: [id])
  week   Week   @relation(fields: [weekId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  game   Game?  @relation(fields: [gameId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@unique([playerId, weekId]) // exactly one row per player per week
  @@index([playerId, weekId])
}

model Team {
  id            String @id @default(cuid())
  userId        String @unique
  name          String @db.VarChar(80)
  budgetInitial Int    @default(100)
  budgetSpent   Int    @default(0)

  user    User            @relation(fields: [userId], references: [id])
  members TeamPlayer[]
  scores  TeamWeekScore[]

  transferLogs TransferLog[]
}

model TeamPlayer {
  id        String @id @default(cuid())
  teamId    String
  playerId  String
  pricePaid Int

  // Active vs Bench + order (1..3)
  isActive    Boolean @default(false)
  activeOrder Int? // 1..3 when active
  benchOrder  Int? // 1..3 when bench

  // Role for active slot only
  role String? @db.VarChar(16)

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [id])

  @@unique([teamId, playerId])
}

model TeamWeekScore {
  id        String @id @default(cuid())
  teamId    String
  weekId    String
  points    Int    @default(0)
  breakdown String @db.Text

  team Team @relation(fields: [teamId], references: [id])
  week Week @relation(fields: [weekId], references: [id])

  @@unique([teamId, weekId])
}

model PlayerAlias {
  id       String @id @default(cuid())
  playerId String
  alias    String @unique @db.VarChar(120)

  // keep cascade so aliases are removed if the player is deleted
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@index([alias])
}

model TransferLog {
  id        String   @id @default(cuid())
  teamId    String
  weekId    String
  createdAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  week Week @relation(fields: [weekId], references: [id])

  @@unique([teamId, weekId])
}
